{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"PyPI Insiders","text":"<p>Self-hosted PyPI server with automatic updates for Insiders versions of projects.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>Some open source projects follow the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of an \"Insiders\" version of the project. This Insiders version is usually a private fork of the public project.</p> <p>To use the Insiders projects as dependencies, sponsors have two options:</p> <ol> <li>specify the dependency as a Git URL (HTTPS or SSH), or as a direct HTTPS URL to a build artifact</li> <li>build and store the artifact in a self-hosted PyPI-like index</li> </ol> <p>The first option is problematic when sponsors' projects are also open source, because most of their contributors will probably not have access to the Insiders version. It means they won't be able to resolve the dependency, even less install it locally. As a result, maintainers must specify the public version of the project as a dependency, and override it with the Insiders version in Continuous Integration / Deployment.</p> <p>In contrast, the second option allows maintainers to specify the dependency normally, i.e. using the same name/identifier as the public version. Maintainers/contributors with access to the Insiders version will resolve and get the Insiders version, while maintainers/contributors without access to the Insiders version will simply get the public one.</p> <p>However, self-hosting a PyPI-like index, and building artifacts for each new Insiders version is not a trivial, straight-forward task: companies and organizations might already have such a setup (with an Artifactory server, a Google Cloud registry, etc.), but individual contributors often won't, and automatically updating repositories, building artifacts and uploading them requires custom scripts.</p> <p>In both cases (company setup or individual contributor) PyPI Insiders comes to the rescue, and manages repository/package updates for you. It comes bundled with a PyPI-like index that you can serve locally, and it watches Insiders repositories, building and uploading distributions to your local index (or any other online index) for each new Insiders version getting published.</p> <p>See below how to install and use PyPI Insiders!</p>"},{"location":"#installation","title":"Installation","text":"<p>PyPI Insiders is itself an Insiders project, so this is a bit of a chicken -and- egg problem, but here's how to install it within itself:</p> <pre><code># clone the repository\ngit clone git@github.com:pawamoy-insiders/pypi-insiders /tmp/pypi-insiders\n\n# we do the following in a subprocess to keep the current one clean\n(\n    # install the project in a virtualenv\n    cd /tmp/pypi-insiders\n    python -m venv .venv\n    . .venv/bin/activate\n    pip install .\n\n    # add pypi-insiders to your watched repositories\n    pypi-insiders repos add pawamoy-insiders/pypi-insiders:pypi-insiders\n\n    # start the server and update all watched repositories / packages\n    pypi-insiders server start\n    pypi-insiders update\n)\n\n# reinstall pypi-insiders with pipx\n! command -v pipx &amp;&gt;/dev/null &amp;&amp; pip install --user pipx\npipx install pypi-insiders --pip-args=\"--extra-index-url http://localhost:31411/simple\"\n</code></pre> <p>The local PyPI server should be running:</p> <pre><code>pypi-insiders server status\n</code></pre> <p>Now, if you wish, you can add your local index URL to pip and other tools' configuration:</p> <pre><code>pip config set global.extra-index-url http://localhost:31411/simple\npdm config pypi.extra.url http://localhost:31411/simple\n</code></pre> <p>PyPI Insiders is now part of the watched repositories and will be updated automatically in your local index if you run the watcher or when you manually update packages (see below). Remember to upgrade it through pipx as well, from time to time:</p> <pre><code>pipx upgrade pypi-insiders\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Configure the repositories to watch:</p> <pre><code>pypi-insiders repos add pawamoy-insiders/pypi-insiders:pypi-insiders\n</code></pre> <p>The format is <code>NAMESPACE/PROJECT:DISTRIBUTION_NAME</code>. Only GitHub projects are supported for now.</p> <p>List watched repositories:</p> <pre><code>pypi-insiders repos list\n</code></pre> <p>Remove watched repositories:</p> <pre><code>pypi-insiders repos remove pawamoy-insiders/pypi-insiders\n</code></pre> <p>Start/stop the local PyPI index, get the server status:</p> <pre><code>pypi-insiders server start\npypi-insiders server status\npypi-insiders server stop\n</code></pre> <p>Manually update all packages from watched repositories:</p> <pre><code>pypi-insiders update\n</code></pre> <p>Start/stop the watcher, get the watcher status:</p> <pre><code>pypi-insiders watcher start\npypi-insiders watcher status\npypi-insiders watcher stop\n</code></pre> <p>Show logs of the server/watcher:</p> <pre><code>pypi-insiders server logs\npypi-insiders watcher logs\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pawamoy@pm.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd pypi-insiders\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>pdm run pypi-insiders [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build pypi-insiders. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>build</code> A simple, correct Python build frontend <code>&gt;=0.10</code> <code>1.0.3</code> MIT License <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.7.22</code> MPL-2.0 <code>cffi</code> Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.16.0</code> MIT <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.0</code> MIT <code>colorama</code> Cross-platform colored terminal text. <code>; os_name == \"nt\"</code> <code>0.4.6</code> BSD License <code>cryptography</code> cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>41.0.4</code> Apache-2.0 OR BSD-3-Clause <code>docutils</code> Docutils -- Python Documentation Utilities <code>&gt;=0.13.1</code> <code>0.20.1</code> public domain, Python, 2-Clause BSD, GPL 3 (see COPYING.txt) <code>failprint</code> Run a command, print its output only if it fails. <code>&gt;=1.0</code> <code>1.0.2</code> ISC <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.6; python_version &lt; \"3.10\"</code> <code>6.8.0</code> Apache Software License <code>importlib-resources</code> Read resources from Python packages <code>; python_version &lt; \"3.9\"</code> <code>6.1.0</code> ? <code>jaraco-classes</code> Utility functions for Python class constructs <code>3.3.0</code> MIT License <code>jeepney</code> Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2; sys_platform == \"linux\"</code> <code>0.8.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>keyring</code> Store and access your passwords safely. <code>&gt;=15.1</code> <code>24.2.0</code> MIT License <code>loguru</code> Python logging made (stupidly) simple <code>&gt;=0.7</code> <code>0.7.2</code> MIT license <code>markdown-it-py</code> Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mdurl</code> Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License <code>more-itertools</code> More routines for operating on iterables, beyond itertools <code>10.1.0</code> MIT License <code>nh3</code> Ammonia HTML sanitizer Python binding <code>&gt;=0.2.14</code> <code>0.2.14</code> MIT <code>packaging</code> Core utilities for Python packages <code>&gt;=23.1</code> <code>23.2</code> BSD License <code>pip</code> The PyPA recommended tool for installing Python packages. <code>&gt;=7</code> <code>23.3</code> MIT <code>pkginfo</code> Query metadata from sdists / bdists / installed packages. <code>&gt;=1.8.1</code> <code>1.9.6</code> MIT <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=3.5</code> <code>3.11.0</code> MIT License <code>psutil</code> Cross-platform lib for process and system monitoring in Python. <code>&gt;=5.9</code> <code>5.9.6</code> BSD-3-Clause <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pycparser</code> C parser in Python <code>2.21</code> BSD <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>&gt;=2.5.1</code> <code>2.16.1</code> BSD-2-Clause <code>pypiserver</code> A minimal PyPI server for use with pip/easy_install. <code>&gt;=1.5</code> <code>2.0.1</code> zlib/libpng License <code>pyproject-hooks</code> Wrappers to call pyproject.toml-based build backend hooks. <code>1.0.0</code> MIT License <code>pywin32-ctypes</code> A (partial) reimplementation of pywin32 using ctypes/cffi <code>&gt;=0.2.0; sys_platform == \"win32\"</code> <code>0.2.2</code> ? <code>readme-renderer</code> readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>42.0</code> Apache License, Version 2.0 <code>requests</code> Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.31.0</code> Apache 2.0 <code>requests-toolbelt</code> A utility belt for advanced users of python-requests <code>!=0.9.0,&gt;=0.8.0</code> <code>1.0.0</code> Apache 2.0 <code>rfc3986</code> Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 <code>rich</code> Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.6.0</code> MIT <code>secretstorage</code> Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2; sys_platform == \"linux\"</code> <code>3.3.3</code> BSD 3-Clause License <code>tomli</code> A lil' TOML parser <code>&gt;=1.1.0; python_version &lt; \"3.11\"</code> <code>2.0.1</code> ? <code>twine</code> Collection of utilities for publishing packages on PyPI <code>&gt;=4.0</code> <code>4.0.2</code> Apache Software License <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.1; python_version &lt; \"3.10\"</code> <code>4.8.0</code> Python Software Foundation License <code>unearth</code> A utility to fetch and download python packages <code>&gt;=0.9</code> <code>0.11.2</code> MIT <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.0.7</code> MIT License <code>win32-setctime</code> A small Python utility to set file creation time on Windows <code>&gt;=1.0.0; sys_platform == \"win32\"</code> <code>1.1.0</code> ? <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.17.0</code> MIT License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>appdirs</code> A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>1.4.4</code> MIT <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.13.0</code> BSD-3-Clause <code>beautifulsoup4</code> Screen-scraping library <code>4.12.2</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=23.9</code> <code>23.10.0</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.16</code> <code>1.16.0</code> MIT <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.7.22</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.3.2</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.3</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>1.0.0</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.1.3</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.0.2</code> MIT License <code>failprint</code> Run a command, print its output only if it fails. <code>&gt;=0.11</code> <code>1.0.2</code> ISC <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.3</code> <code>2.3.1</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.10</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.40</code> BSD <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.35</code> <code>0.36.7</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.3; python_version &lt; \"3.10\"</code> <code>6.8.0</code> Apache Software License <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>lxml</code> Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. <code>&gt;=4.9</code> <code>4.9.3</code> BSD-3-Clause <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.5</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.3</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=1.7</code> <code>1.7.0.1.0.1</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.5.3</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of github committers and other useful GIT info such as last modified date <code>&gt;=1.2</code> <code>1.2.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=9.4</code> <code>9.4.6+insiders.4.42.2</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.2</code> <code>1.3</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.7</code> <code>0.7.1</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.23</code> <code>0.23.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.7.3.1.5.1</code> ISC <code>mypy</code> Optional static typing for Python <code>&gt;=1.5</code> <code>1.6.1</code> MIT License <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.2</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.11.2</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>3.11.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.3.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.16.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.3</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=7.4</code> <code>7.4.2</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=4.1</code> <code>4.1.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.15.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.3</code> <code>3.3.1</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2023.3.post1</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2023.10.3</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.17.36</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.13\"</code> <code>0.2.8</code> MIT <code>ruff</code> An extremely fast Python linter, written in Rust. <code>&gt;=0.0</code> <code>0.1.0</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2.3</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>68.2.2</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>soupsieve</code> A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.5</code> MIT License <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=2.0; python_version &lt; '3.11'</code> <code>2.0.1</code> ? <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.5</code> <code>3.5.0.0</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.12</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.0.1; python_version &lt; \"3.11\"</code> <code>4.8.0</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.0.7</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.17.0</code> MIT License <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2023, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"insiders/","title":"Insiders","text":"<p>PyPI Insiders follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders. Read on to learn what sponsorships achieve, how to become a sponsor to get access to Insiders, and what's in it for you!</p>"},{"location":"insiders/#what-is-insiders","title":"What is Insiders?","text":"<p>PyPI Insiders Insiders is a private fork of PyPI Insiders, hosted as a private GitHub repository. Almost<sup>1</sup> all new features are developed as part of this fork, which means that they are immediately available to all eligible sponsors, as they are made collaborators of this repository.</p> <p>Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into PyPI Insiders and released for general availability, making them available to all users. Bugfixes are always released in tandem.</p> <p>Sponsorships start as low as $10 a month.<sup>2</sup></p>"},{"location":"insiders/#what-sponsorships-achieve","title":"What sponsorships achieve","text":"<p>Sponsorships make this project sustainable, as they buy the maintainers of this project time \u2013 a very scarce resource \u2013 which is spent on the development of new features, bug fixing, stability improvement, issue triage and general support. The biggest bottleneck in Open Source is time.<sup>3</sup></p> <p>If you're unsure if you should sponsor this project, check out the list of completed funding goals to learn whether you're already using features that were developed with the help of sponsorships. You're most likely using at least a handful of them, thanks to our awesome sponsors!</p>"},{"location":"insiders/#whats-in-it-for-me","title":"What's in it for me?","text":"<p>The moment you become a sponsor, you'll get immediate     access to 1 additional features that you can start using right away, and     which are currently exclusively available to sponsors:</p> <ul> <li> [Project] Self-hosted PyPI server with automatic updates for Insiders versions of projects</li> </ul>"},{"location":"insiders/#how-to-become-a-sponsor","title":"How to become a sponsor","text":"<p>Thanks for your interest in sponsoring! In order to become an eligible sponsor with your GitHub account, visit pawamoy's sponsor profile, and complete a sponsorship of $10 a month or more. You can use your individual or organization GitHub account for sponsoring.</p> <p>Important: If you're sponsoring @pawamoy through a GitHub organization, please send a short email to pawamoy@pm.me with the name of your organization and the GitHub account of the individual that should be added as a collaborator.<sup>4</sup></p> <p>You can cancel your sponsorship anytime.<sup>5</sup></p> <p> \u00a0 Join our  awesome sponsors</p> <p>   If you sponsor publicly, you're automatically added here with a link to   your profile and avatar to show your support for PyPI Insiders.   Alternatively, if you wish to keep your sponsorship private, you'll be a   silent +1. You can select visibility during checkout and change it   afterwards. </p>"},{"location":"insiders/#funding","title":"Funding","text":""},{"location":"insiders/#goals","title":"Goals","text":"<p>The following section lists all funding goals. Each goal contains a list of features prefixed with a checkmark symbol, denoting whether a feature is  already available or   planned, but not yet implemented. When the funding goal is hit, the features are released for general availability. </p> <p></p>"},{"location":"insiders/#1000-gravifridge-user-manual","title":"$ 1,000 \u2014 GraviFridge User Manual","text":"<ul> <li> [Project] Self-hosted PyPI server with automatic updates for Insiders versions of projects</li> </ul>"},{"location":"insiders/#goals-completed","title":"Goals completed","text":"<p>This section lists all funding goals that were previously completed, which means that those features were part of Insiders, but are now generally available and can be used by all users.</p> <p></p>"},{"location":"insiders/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"insiders/#compatibility","title":"Compatibility","text":"<p>We're building an open source project and want to allow outside collaborators to use PyPI Insiders locally without having access to Insiders. Is this still possible?</p> <p>Yes. Insiders is compatible with PyPI Insiders. Almost all new features and configuration options are either backward-compatible or implemented behind feature flags. Most Insiders features enhance the overall experience, though while these features add value for the users of your project, they shouldn't be necessary for previewing when making changes to content.</p>"},{"location":"insiders/#payment","title":"Payment","text":"<p>We don't want to pay for sponsorship every month. Are there any other options?</p> <p>Yes. You can sponsor on a yearly basis by switching your GitHub account to a yearly billing cycle. If for some reason you cannot do that, you could also create a dedicated GitHub account with a yearly billing cycle, which you only use for sponsoring (some sponsors already do that).</p> <p>If you have any problems or further questions, please reach out to pawamoy@pm.me.</p>"},{"location":"insiders/#terms","title":"Terms","text":"<p>Are we allowed to use Insiders under the same terms and conditions as PyPI Insiders?</p> <p>Yes. Whether you're an individual or a company, you may use PyPI Insiders Insiders precisely under the same terms as PyPI Insiders, which are given by the ISC License. However, we kindly ask you to respect our fair use policy:</p> <ul> <li> <p>Please don't distribute the source code of Insiders. You may freely use   it for public, private or commercial projects, privately fork or mirror it,   but please don't make the source code public, as it would counteract the    sponsorware strategy.</p> </li> <li> <p>If you cancel your subscription, you're automatically removed as a   collaborator and will miss out on all future updates of Insiders. However, you   may use the latest version that's available to you as long as you like.   Just remember that GitHub deletes private forks.</p> </li> </ul> <ol> <li> <p>In general, every new feature is first exclusively released to sponsors, but sometimes upstream dependencies enhance existing features that must be supported by PyPI Insiders.\u00a0\u21a9</p> </li> <li> <p>Note that $10 a month is the minimum amount to become eligible for Insiders. While GitHub Sponsors also allows to sponsor lower amounts or one-time amounts, those can't be granted access to Insiders due to technical reasons. Such contributions are still very much welcome as they help ensuring the project's sustainability.\u00a0\u21a9</p> </li> <li> <p>Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use PyPI Insiders, you can be sure that bugs are fixed quickly and new features are added regularly.\u00a0\u21a9</p> </li> <li> <p>It's currently not possible to grant access to each member of an organization, as GitHub only allows for adding users. Thus, after sponsoring, please send an email to pawamoy@pm.me, stating which account should become a collaborator of the Insiders repository. We're working on a solution which will make access to organizations much simpler. To ensure that access is not tied to a particular individual GitHub account, create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being added to the list of collaborators, the bot account can create a private fork of the private Insiders GitHub repository, and grant access to all members of the organizations.\u00a0\u21a9</p> </li> <li> <p>If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable.\u00a0\u21a9</p> </li> </ol>"},{"location":"insiders/changelog/","title":"Changelog","text":""},{"location":"insiders/changelog/#pypi-insiders-insiders","title":"PyPI Insiders Insiders","text":""},{"location":"insiders/changelog/#1.3.1","title":"1.3.1 October 20, 2023","text":"<ul> <li>Catch psutil errors to prevent crashes</li> </ul>"},{"location":"insiders/changelog/#1.3.0","title":"1.3.0 October 19, 2023","text":"<ul> <li>Expose function to configure logging</li> <li>Expose function to run a subprocess and log its output</li> </ul>"},{"location":"insiders/changelog/#1.2.5","title":"1.2.5 October 02, 2023","text":"<ul> <li>Always create dist directory</li> </ul>"},{"location":"insiders/changelog/#1.2.4","title":"1.2.4 September 21, 2023","text":"<ul> <li>Fix success log message (missing repository prefix)</li> </ul>"},{"location":"insiders/changelog/#1.2.3","title":"1.2.3 September 21, 2023","text":"<ul> <li>Double <code>{</code> and <code>}</code> brackets in log messages to prevent formatting errors</li> </ul>"},{"location":"insiders/changelog/#1.2.2","title":"1.2.2 September 17, 2023","text":"<ul> <li>Compare tag and version, check if exist to avoid building for nothing</li> <li>Fix passing log level on the command line</li> <li>Decrease watcher sleep time from 1 hour to 30 minutes</li> </ul>"},{"location":"insiders/changelog/#1.2.1","title":"1.2.1 August 20, 2023","text":"<ul> <li>Detect pre-releases when checking latest version on PyPI server</li> <li>Detect and use default Git branch</li> </ul>"},{"location":"insiders/changelog/#1.2.0","title":"1.2.0 August 17, 2023","text":"<ul> <li>Add commands to show server/watcher logs</li> <li>Improve logging</li> </ul>"},{"location":"insiders/changelog/#1.1.0","title":"1.1.0 June 13, 2023","text":"<ul> <li>Add logging options, improve logging</li> <li>Remove repository from cache as well as config</li> <li>Remove status from process metadata</li> </ul>"},{"location":"insiders/changelog/#1.0.0","title":"1.0.0 June 13, 2023","text":"<ul> <li>Release first Insiders version</li> </ul>"},{"location":"insiders/installation/","title":"Getting started with Insiders","text":"<p>PyPI Insiders Insiders is a compatible drop-in replacement for PyPI Insiders, and can be installed similarly using <code>pip</code> or <code>git</code>. Note that in order to access the Insiders  repository, you need to become an eligible sponsor of @pawamoy on GitHub.</p>"},{"location":"insiders/installation/#installation","title":"Installation","text":""},{"location":"insiders/installation/#with-itself","title":"with itself","text":"<p>See how to install it.</p>"},{"location":"insiders/installation/#with-pip-sshhttps","title":"with pip (ssh/https)","text":"<p>PyPI Insiders Insiders can be installed with <code>pip</code> using SSH:</p> <pre><code>pip install git+ssh://git@github.com/pawamoy-insiders/pypi-insiders.git\n</code></pre> <p>Or using HTTPS:</p> <pre><code>pip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/pypi-insiders.git\n</code></pre> How to get a GitHub personal access token <p>The <code>GH_TOKEN</code> environment variable is a GitHub token. It can be obtained by creating a personal access token for your GitHub account. It will give you access to the Insiders repository, programmatically, from the command line or GitHub Actions workflows:</p> <ol> <li>Go to https://github.com/settings/tokens</li> <li>Click on Generate a new token</li> <li>Enter a name and select the <code>repo</code> scope</li> <li>Generate the token and store it in a safe place</li> </ol> <p>Note that the personal access token must be kept secret at all times, as it allows the owner to access your private repositories.</p>"},{"location":"insiders/installation/#with-pip-self-hosted","title":"with pip (self-hosted)","text":"<p>Self-hosting the Insiders package makes it possible to depend on PyPI Insiders normally, while transparently downloading and installing the Insiders version locally. It means that you can specify your dependencies normally, and your contributors without access to Insiders will get the public version, while you get the Insiders version on your machine.</p> <p>Limitation</p> <p>With this method, there is no way to force the installation of an Insiders version rather than a public version. If there is a public version that is more recent than your self-hosted Insiders version, the public version will take precedence. Remember to regularly update your self-hosted versions by uploading latest distributions.</p> <p>You can build the distributions for Insiders yourself, by cloning the repository and using build to build the distributions, or you can download them from our GitHub Releases. You can upload these distributions to a private PyPI-like registry (Artifactory, Google Cloud, pypiserver, etc.) with Twine:</p> <pre><code># download distributions in ~/dists, then upload with:\ntwine upload --repository-url https://your-private-index.com ~/dists/*\n</code></pre> <p>You might also need to provide a username and password/token to authenticate against the registry. Please check Twine's documentation.</p> <p>You can then configure pip (or other tools) to look for packages into your package index. For example, with pip:</p> <pre><code>pip config set global.extra-index-url https://your-private-index.com/simple\n</code></pre> <p>Note that the URL might differ depending on whether your are uploading a package (with Twine) or installing a package (with pip), and depending on the registry you are using (Artifactory, Google Cloud, etc.). Please check the documentation of your registry to learn how to configure your environment.</p> <p>We kindly ask that you do not upload the distributions to public registries, as it is against our Terms of use.</p> Full example with <code>pypiserver</code> <p>In this example we use pypiserver to serve a local PyPI index.</p> <pre><code>pip install --user pypiserver\n# or pipx install pypiserver\n\n# create a packages directory\nmkdir -p ~/.local/pypiserver/packages\n\n# run the pypi server without authentication\npypi-server run -p 8080 -a . -P . ~/.local/pypiserver/packages &amp;\n</code></pre> <p>We can configure the credentials to access the server in <code>~/.pypirc</code>:</p> .pypirc<pre><code>[distutils]\nindex-servers =\n    local\n\n[local]\nrepository: http://localhost:8080\nusername:\npassword:\n</code></pre> <p>We then clone the Insiders repository, build distributions and upload them to our local server:</p> <pre><code># clone the repository\ngit clone git@github.com:pawamoy-insiders/pypi-insiders\ncd pypi-insiders\n\n# install build\npip install --user build\n# or pipx install build\n\n# checkout latest tag\ngit checkout $(git describe --tags --abbrev=0)\n\n# build the distributions\npyproject-build\n\n# upload them to our local server\ntwine upload -r local dist/* --skip-existing\n</code></pre> <p>Finally, we configure pip, and for example PDM, to use our local index to find packages:</p> <pre><code>pip config set global.extra-index-url http://localhost:8080/simple\npdm config pypi.extra.url http://localhost:8080/simple\n</code></pre> <p>Now when running <code>pip install pypi-insiders</code>, or resolving dependencies with PDM, both tools will look into our local index and find the Insiders version. Remember to update your local index regularly!</p>"},{"location":"insiders/installation/#with-git","title":"with git","text":"<p>Of course, you can use PyPI Insiders Insiders directly from <code>git</code>:</p> <pre><code>git clone git@github.com:pawamoy-insiders/pypi-insiders\n</code></pre> <p>When cloning from <code>git</code>, the package must be installed:</p> <pre><code>pip install -e pypi-insiders\n</code></pre>"},{"location":"insiders/installation/#upgrading","title":"Upgrading","text":"<p>When upgrading Insiders, you should always check the version of PyPI Insiders which makes up the first part of the version qualifier. For example, a version like <code>8.x.x.4.x.x</code> means that Insiders <code>4.x.x</code> is currently based on <code>8.x.x</code>.</p> <p>If the major version increased, it's a good idea to consult the changelog and go through the steps to ensure your configuration is up to date and all necessary changes have been made.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> pypi_insiders<ul> <li> cli<ul> <li> repos</li> <li> server</li> <li> update</li> <li> watcher</li> </ul> </li> <li> debug</li> <li> defaults</li> <li> logger</li> <li> repos</li> <li> server</li> <li> update</li> <li> watcher</li> </ul> </li> </ul>"},{"location":"reference/pypi_insiders/","title":"Index","text":""},{"location":"reference/pypi_insiders/#pypi_insiders","title":"pypi_insiders","text":"<p>PyPI Insiders package.</p> <p>Self-hosted PyPI server with automatic updates for Insiders versions of projects.</p> <p>Modules:</p> <ul> <li> <code>cli</code>         \u2013          <p>Module that contains the command line application.</p> </li> <li> <code>debug</code>         \u2013          <p>Debugging utilities.</p> </li> <li> <code>defaults</code>         \u2013          <p>Default values throughout the project.</p> </li> <li> <code>logger</code>         \u2013          <p>Logging utilities.</p> </li> <li> <code>repos</code>         \u2013          <p>Manage repositories.</p> </li> <li> <code>server</code>         \u2013          <p>Logic for the PyPI server.</p> </li> <li> <code>update</code>         \u2013          <p>Logic for updating packages.</p> </li> <li> <code>watcher</code>         \u2013          <p>Repositories watcher.</p> </li> </ul>"},{"location":"reference/pypi_insiders/debug/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> debug","text":""},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>         \u2013          <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>         \u2013          <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>         \u2013          <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>           \u2013            <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>           \u2013            <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>           \u2013            <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>             (<code>str</code>)         \u2013          <p>Python interpreter name.</p> </li> <li> <code>interpreter_version</code>             (<code>str</code>)         \u2013          <p>Python interpreter version.</p> </li> <li> <code>packages</code>             (<code>list[Package]</code>)         \u2013          <p>Installed packages.</p> </li> <li> <code>platform</code>             (<code>str</code>)         \u2013          <p>Operating System.</p> </li> <li> <code>variables</code>             (<code>list[Variable]</code>)         \u2013          <p>Environment variables.</p> </li> </ul>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Package","title":"Package  <code>dataclass</code>","text":"<p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Package name.</p> </li> <li> <code>version</code>             (<code>str</code>)         \u2013          <p>Package version.</p> </li> </ul>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Variable name.</p> </li> <li> <code>value</code>             (<code>str</code>)         \u2013          <p>Variable value.</p> </li> </ul>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>         \u2013          <p>Environment information.</p> </li> </ul>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'pypi-insiders') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>             (<code>str</code>, default:                 <code>'pypi-insiders'</code> )         \u2013          <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A version number.</p> </li> </ul>"},{"location":"reference/pypi_insiders/debug/#pypi_insiders.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p>"},{"location":"reference/pypi_insiders/defaults/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> defaults","text":""},{"location":"reference/pypi_insiders/defaults/#pypi_insiders.defaults","title":"defaults","text":"<p>Default values throughout the project.</p>"},{"location":"reference/pypi_insiders/logger/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> logger","text":""},{"location":"reference/pypi_insiders/logger/#pypi_insiders.logger","title":"logger","text":"<p>Logging utilities.</p> <p>Functions:</p> <ul> <li> <code>double_brackets</code>           \u2013            <p>Double <code>{</code> and <code>}</code> in log messages to prevent formatting errors.</p> </li> <li> <code>log_captured</code>           \u2013            <p>Log captured text.</p> </li> <li> <code>redirect_output_to_logging</code>           \u2013            <p>Redirect standard output and error to logging.</p> </li> <li> <code>run</code>           \u2013            <p>Run a subprocess, log its standard output and error, return its output.</p> </li> <li> <code>tail</code>           \u2013            <p>Tail a log file.</p> </li> </ul>"},{"location":"reference/pypi_insiders/logger/#pypi_insiders.logger.double_brackets","title":"double_brackets","text":"<pre><code>double_brackets(message: str) -&gt; str\n</code></pre> <p>Double <code>{</code> and <code>}</code> in log messages to prevent formatting errors.</p> <p>Parameters:</p> <ul> <li> <code>message</code>             (<code>str</code>)         \u2013          <p>The message to transform.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The updated message.</p> </li> </ul>"},{"location":"reference/pypi_insiders/logger/#pypi_insiders.logger.log_captured","title":"log_captured","text":"<pre><code>log_captured(\n    text: str, level: str = \"info\", pkg: str | None = None\n) -&gt; None\n</code></pre> <p>Log captured text.</p> <p>Parameters:</p> <ul> <li> <code>text</code>             (<code>str</code>)         \u2013          <p>The text to split and log.</p> </li> <li> <code>level</code>             (<code>str</code>, default:                 <code>'info'</code> )         \u2013          <p>The log level to use.</p> </li> </ul>"},{"location":"reference/pypi_insiders/logger/#pypi_insiders.logger.redirect_output_to_logging","title":"redirect_output_to_logging","text":"<pre><code>redirect_output_to_logging(\n    stdout_level: str = \"info\", stderr_level: str = \"error\"\n) -&gt; Iterator[None]\n</code></pre> <p>Redirect standard output and error to logging.</p> <p>Yields:</p> <ul> <li> <code>Iterator[None]</code>         \u2013          <p>Nothing.</p> </li> </ul>"},{"location":"reference/pypi_insiders/logger/#pypi_insiders.logger.run","title":"run","text":"<pre><code>run(*args: str | Path, **kwargs: Any) -&gt; str\n</code></pre> <p>Run a subprocess, log its standard output and error, return its output.</p> <p>Parameters:</p> <ul> <li> <code>*args</code>             (<code>str | Path</code>, default:                 <code>()</code> )         \u2013          <p>Command line arguments.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional arguments passed to subprocess.Popen.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The process standard output.</p> </li> </ul>"},{"location":"reference/pypi_insiders/logger/#pypi_insiders.logger.tail","title":"tail","text":"<pre><code>tail(log_file: str) -&gt; None\n</code></pre> <p>Tail a log file.</p> <p>Parameters:</p> <ul> <li> <code>log_file</code>             (<code>str</code>)         \u2013          <p>The log file to tail.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> repos","text":""},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos","title":"repos","text":"<p>Manage repositories.</p> <p>Classes:</p> <ul> <li> <code>RepositoryCache</code>         \u2013          <p>A cache for local clones of configured repositories.</p> </li> <li> <code>RepositoryConfig</code>         \u2013          <p>Repositories configuration.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryCache","title":"RepositoryCache","text":"<pre><code>RepositoryCache(cache_dir: str | Path = DEFAULT_REPO_DIR)\n</code></pre> <p>A cache for local clones of configured repositories.</p> <p>Parameters:</p> <ul> <li> <code>cache_dir</code>             (<code>str | Path</code>, default:                 <code>DEFAULT_REPO_DIR</code> )         \u2013          <p>The directory in which to clone the repositories.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>build</code>           \u2013            <p>Build distributions.</p> </li> <li> <code>checkout</code>           \u2013            <p>Checkout a ref.</p> </li> <li> <code>checkout_origin_head</code>           \u2013            <p>Checkout origin's HEAD again.</p> </li> <li> <code>clone</code>           \u2013            <p>Clone a repository.</p> </li> <li> <code>exists</code>           \u2013            <p>Check if a repository already exists.</p> </li> <li> <code>latest_tag</code>           \u2013            <p>Get the latest Git tag.</p> </li> <li> <code>pull</code>           \u2013            <p>Pull latest changes.</p> </li> <li> <code>remove</code>           \u2013            <p>Remove a repository from the cache.</p> </li> <li> <code>remove_dist</code>           \u2013            <p>Remove the <code>dist</code> folder of a repository.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryCache.build","title":"build","text":"<pre><code>build(repo: str) -&gt; Iterator[Path]\n</code></pre> <p>Build distributions.</p> <p>Parameters:</p> <ul> <li> <code>repo</code>             (<code>str</code>)         \u2013          <p>The repository to work on.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Iterator[Path]</code>         \u2013          <p>File path for each distribution.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryCache.checkout","title":"checkout","text":"<pre><code>checkout(repo: str, ref: str) -&gt; None\n</code></pre> <p>Checkout a ref.</p> <p>Parameters:</p> <ul> <li> <code>repo</code>             (<code>str</code>)         \u2013          <p>The repository to work on.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryCache.checkout_origin_head","title":"checkout_origin_head","text":"<pre><code>checkout_origin_head(repo: str) -&gt; None\n</code></pre> <p>Checkout origin's HEAD again.</p> <p>Parameters:</p> <ul> <li> <code>repo</code>             (<code>str</code>)         \u2013          <p>The repository to work on.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryCache.clone","title":"clone","text":"<pre><code>clone(repo: str) -&gt; Path\n</code></pre> <p>Clone a repository.</p> <p>Parameters:</p> <ul> <li> <code>repo</code>             (<code>str</code>)         \u2013          <p>The repository to clone.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Path</code>         \u2013          <p>The path to the cloned repository.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryCache.exists","title":"exists","text":"<pre><code>exists(repo: str) -&gt; bool\n</code></pre> <p>Check if a repository already exists.</p> <p>Parameters:</p> <ul> <li> <code>repo</code>             (<code>str</code>)         \u2013          <p>The repository to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or false.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryCache.latest_tag","title":"latest_tag","text":"<pre><code>latest_tag(repo: str) -&gt; str\n</code></pre> <p>Get the latest Git tag.</p> <p>Parameters:</p> <ul> <li> <code>repo</code>             (<code>str</code>)         \u2013          <p>The repository to work on.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A tag.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryCache.pull","title":"pull","text":"<pre><code>pull(repo: str) -&gt; None\n</code></pre> <p>Pull latest changes.</p> <p>Parameters:</p> <ul> <li> <code>repo</code>             (<code>str</code>)         \u2013          <p>The repository to work on.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryCache.remove","title":"remove","text":"<pre><code>remove(repo: str) -&gt; None\n</code></pre> <p>Remove a repository from the cache.</p> <p>Parameters:</p> <ul> <li> <code>repo</code>             (<code>str</code>)         \u2013          <p>The repository to remove.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryCache.remove_dist","title":"remove_dist","text":"<pre><code>remove_dist(repo: str) -&gt; None\n</code></pre> <p>Remove the <code>dist</code> folder of a repository.</p> <p>Parameters:</p> <ul> <li> <code>repo</code>             (<code>str</code>)         \u2013          <p>The repository to work on.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryConfig","title":"RepositoryConfig","text":"<pre><code>RepositoryConfig(conf_path: str | Path = DEFAULT_CONF_PATH)\n</code></pre> <p>Repositories configuration.</p> <p>Parameters:</p> <ul> <li> <code>conf_path</code>             (<code>str | Path</code>, default:                 <code>DEFAULT_CONF_PATH</code> )         \u2013          <p>The path to the configuration file.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add_repositories</code>           \u2013            <p>Add the given repositories to the configuration file.</p> </li> <li> <code>get_repositories</code>           \u2013            <p>Get configured repositories.</p> </li> <li> <code>remove_repositories</code>           \u2013            <p>Remove the given repositories from the configuration file.</p> </li> <li> <code>save_repositories</code>           \u2013            <p>Save the given repositories into the configuration file.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryConfig.add_repositories","title":"add_repositories","text":"<pre><code>add_repositories(repos: dict[str, str]) -&gt; dict[str, str]\n</code></pre> <p>Add the given repositories to the configuration file.</p> <p>Parameters:</p> <ul> <li> <code>repos</code>             (<code>dict[str, str]</code>)         \u2013          <p>The repositories to add.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, str]</code>         \u2013          <p>The configured repositories.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryConfig.get_repositories","title":"get_repositories","text":"<pre><code>get_repositories() -&gt; dict[str, str]\n</code></pre> <p>Get configured repositories.</p> <p>Returns:</p> <ul> <li> <code>dict[str, str]</code>         \u2013          <p>The dict of repositories (<code>\"NAMESPACE/PROJECT\": \"PACKAGE\"</code>).</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryConfig.remove_repositories","title":"remove_repositories","text":"<pre><code>remove_repositories(repos: Iterable[str]) -&gt; dict[str, str]\n</code></pre> <p>Remove the given repositories from the configuration file.</p> <p>Parameters:</p> <ul> <li> <code>repos</code>             (<code>Iterable[str]</code>)         \u2013          <p>The repositories to remove.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, str]</code>         \u2013          <p>The configured repositories.</p> </li> </ul>"},{"location":"reference/pypi_insiders/repos/#pypi_insiders.repos.RepositoryConfig.save_repositories","title":"save_repositories","text":"<pre><code>save_repositories(repos: dict[str, str]) -&gt; dict[str, str]\n</code></pre> <p>Save the given repositories into the configuration file.</p> <p>Parameters:</p> <ul> <li> <code>repos</code>             (<code>dict[str, str]</code>)         \u2013          <p>The repositories to save.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, str]</code>         \u2013          <p>The configured repositories.</p> </li> </ul>"},{"location":"reference/pypi_insiders/server/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> server","text":""},{"location":"reference/pypi_insiders/server/#pypi_insiders.server","title":"server","text":"<p>Logic for the PyPI server.</p> <p>Classes:</p> <ul> <li> <code>DistCollection</code>         \u2013          <p>Manage distributions.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>server_logs</code>           \u2013            <p>Show the server logs.</p> </li> <li> <code>server_loop</code>           \u2013            <p>Run the server in the foreground.</p> </li> <li> <code>server_status</code>           \u2013            <p>Return the server status as a dict of metadata.</p> </li> <li> <code>start_server</code>           \u2013            <p>Start the watcher in the background.</p> </li> <li> <code>stop_server</code>           \u2013            <p>Stop the server.</p> </li> </ul>"},{"location":"reference/pypi_insiders/server/#pypi_insiders.server.DistCollection","title":"DistCollection","text":"<pre><code>DistCollection(index_url: str = DEFAULT_INDEX_URL)\n</code></pre> <p>Manage distributions.</p> <p>Parameters:</p> <ul> <li> <code>index_url</code>             (<code>str</code>, default:                 <code>DEFAULT_INDEX_URL</code> )         \u2013          <p>The URL of the PyPI index to use.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>latest_version</code>           \u2013            <p>Get the latest version of a package.</p> </li> <li> <code>upload</code>           \u2013            <p>Upload distributions.</p> </li> <li> <code>version_exists</code>           \u2013            <p>Tell if a package version exists.</p> </li> </ul>"},{"location":"reference/pypi_insiders/server/#pypi_insiders.server.DistCollection.latest_version","title":"latest_version","text":"<pre><code>latest_version(package: str) -&gt; str | None\n</code></pre> <p>Get the latest version of a package.</p> <p>Parameters:</p> <ul> <li> <code>package</code>             (<code>str</code>)         \u2013          <p>The package name (distribution name).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | None</code>         \u2013          <p>The version as a string, or none.</p> </li> </ul>"},{"location":"reference/pypi_insiders/server/#pypi_insiders.server.DistCollection.upload","title":"upload","text":"<pre><code>upload(dists: Iterable[str | Path]) -&gt; None\n</code></pre> <p>Upload distributions.</p> <p>Parameters:</p> <ul> <li> <code>dists</code>             (<code>Iterable[str | Path]</code>)         \u2013          <p>The distributions to upload.</p> </li> </ul>"},{"location":"reference/pypi_insiders/server/#pypi_insiders.server.DistCollection.version_exists","title":"version_exists","text":"<pre><code>version_exists(package: str, version: str) -&gt; bool\n</code></pre> <p>Tell if a package version exists.</p> <p>Parameters:</p> <ul> <li> <code>package</code>             (<code>str</code>)         \u2013          <p>The package name (distribution name).</p> </li> <li> <code>version</code>             (<code>str</code>)         \u2013          <p>The package version.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/pypi_insiders/server/#pypi_insiders.server.server_logs","title":"server_logs","text":"<pre><code>server_logs(*, port: int = 31411) -&gt; None\n</code></pre> <p>Show the server logs.</p> <p>Parameters:</p> <ul> <li> <code>port</code>             (<code>int</code>, default:                 <code>31411</code> )         \u2013          <p>The server port.</p> </li> </ul>"},{"location":"reference/pypi_insiders/server/#pypi_insiders.server.server_loop","title":"server_loop","text":"<pre><code>server_loop(\n    *,\n    dist_dir: str | Path = DEFAULT_DIST_DIR,\n    port: int = DEFAULT_PORT\n) -&gt; None\n</code></pre> <p>Run the server in the foreground.</p> <p>Parameters:</p> <ul> <li> <code>dist_dir</code>             (<code>str | Path</code>, default:                 <code>DEFAULT_DIST_DIR</code> )         \u2013          <p>The directory that will receive the distribution artifacts.</p> </li> <li> <code>port</code>             (<code>int</code>, default:                 <code>DEFAULT_PORT</code> )         \u2013          <p>The server port.</p> </li> </ul>"},{"location":"reference/pypi_insiders/server/#pypi_insiders.server.server_status","title":"server_status","text":"<pre><code>server_status(*, port: int = 31411) -&gt; dict | None\n</code></pre> <p>Return the server status as a dict of metadata.</p> <p>Parameters:</p> <ul> <li> <code>port</code>             (<code>int</code>, default:                 <code>31411</code> )         \u2013          <p>The server port.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict | None</code>         \u2013          <p>Some metadata about the server process.</p> </li> </ul>"},{"location":"reference/pypi_insiders/server/#pypi_insiders.server.start_server","title":"start_server","text":"<pre><code>start_server(\n    *,\n    dist_dir: str | Path = DEFAULT_DIST_DIR,\n    port: int = DEFAULT_PORT\n) -&gt; None\n</code></pre> <p>Start the watcher in the background.</p> <p>Parameters:</p> <ul> <li> <code>dist_dir</code>             (<code>str | Path</code>, default:                 <code>DEFAULT_DIST_DIR</code> )         \u2013          <p>The directory that will receive the distribution artifacts.</p> </li> <li> <code>port</code>             (<code>int</code>, default:                 <code>DEFAULT_PORT</code> )         \u2013          <p>The server port.</p> </li> </ul>"},{"location":"reference/pypi_insiders/server/#pypi_insiders.server.stop_server","title":"stop_server","text":"<pre><code>stop_server(*, port: int = 31411) -&gt; bool\n</code></pre> <p>Stop the server.</p> <p>Parameters:</p> <ul> <li> <code>port</code>             (<code>int</code>, default:                 <code>31411</code> )         \u2013          <p>The server port.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether a process was killed or not.</p> </li> </ul>"},{"location":"reference/pypi_insiders/update/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> update","text":""},{"location":"reference/pypi_insiders/update/#pypi_insiders.update","title":"update","text":"<p>Logic for updating packages.</p> <p>Functions:</p> <ul> <li> <code>update_packages</code>           \u2013            <p>Update PyPI packages.</p> </li> </ul>"},{"location":"reference/pypi_insiders/update/#pypi_insiders.update.update_packages","title":"update_packages","text":"<pre><code>update_packages(\n    *,\n    conf_path: str | Path = DEFAULT_CONF_PATH,\n    repo_dir: str | Path = DEFAULT_REPO_DIR,\n    index_url: str = DEFAULT_INDEX_URL,\n    repos: Iterable[str] | None = None\n) -&gt; None\n</code></pre> <p>Update PyPI packages.</p> <p>For each configured repository, pull latest contents, checkout latest tag, and if the corresponding version is not present on the index, build and upload distributions.</p> <p>Parameters:</p> <ul> <li> <code>conf_path</code>             (<code>str | Path</code>, default:                 <code>DEFAULT_CONF_PATH</code> )         \u2013          <p>The path to the configuration file.</p> </li> <li> <code>repo_dir</code>             (<code>str | Path</code>, default:                 <code>DEFAULT_REPO_DIR</code> )         \u2013          <p>The directory containing the repository clones.</p> </li> <li> <code>index_url</code>             (<code>str</code>, default:                 <code>DEFAULT_INDEX_URL</code> )         \u2013          <p>The URL of the PyPI index to upload to.</p> </li> <li> <code>repos</code>             (<code>Iterable[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Repositories to update. By default, all configured repositories are updated.</p> </li> </ul>"},{"location":"reference/pypi_insiders/watcher/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> watcher","text":""},{"location":"reference/pypi_insiders/watcher/#pypi_insiders.watcher","title":"watcher","text":"<p>Repositories watcher.</p> <p>Classes:</p> <ul> <li> <code>GracefulExit</code>         \u2013          <p>Signal handler to exit gracefully.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>start_watcher</code>           \u2013            <p>Start the watcher in the background.</p> </li> <li> <code>stop_watcher</code>           \u2013            <p>Stop the watcher.</p> </li> <li> <code>watcher_logs</code>           \u2013            <p>Show the watcher logs.</p> </li> <li> <code>watcher_loop</code>           \u2013            <p>Run the watcher in the foreground.</p> </li> <li> <code>watcher_status</code>           \u2013            <p>Return the watcher status as a dict of metadata.</p> </li> </ul>"},{"location":"reference/pypi_insiders/watcher/#pypi_insiders.watcher.GracefulExit","title":"GracefulExit","text":"<pre><code>GracefulExit()\n</code></pre> <p>Signal handler to exit gracefully.</p> <p>Methods:</p> <ul> <li> <code>sleep</code>           \u2013            <p>Sleep for a bit.</p> </li> </ul>"},{"location":"reference/pypi_insiders/watcher/#pypi_insiders.watcher.GracefulExit.sleep","title":"sleep","text":"<pre><code>sleep(seconds: int) -&gt; None\n</code></pre> <p>Sleep for a bit.</p> <p>Parameters:</p> <ul> <li> <code>seconds</code>             (<code>int</code>)         \u2013          <p>Number of seconds of sleep.</p> </li> </ul>"},{"location":"reference/pypi_insiders/watcher/#pypi_insiders.watcher.start_watcher","title":"start_watcher","text":"<pre><code>start_watcher(\n    *,\n    conf_path: str | Path = DEFAULT_CONF_PATH,\n    repo_dir: str | Path = DEFAULT_REPO_DIR,\n    index_url: str = DEFAULT_INDEX_URL,\n    sleep: int = DEFAULT_WATCHER_SLEEP\n) -&gt; None\n</code></pre> <p>Start the watcher in the background.</p> <p>Parameters:</p> <ul> <li> <code>conf_path</code>             (<code>str | Path</code>, default:                 <code>DEFAULT_CONF_PATH</code> )         \u2013          <p>The path to the configuration file.</p> </li> <li> <code>repo_dir</code>             (<code>str | Path</code>, default:                 <code>DEFAULT_REPO_DIR</code> )         \u2013          <p>The directory in which the repositories are cloned.</p> </li> <li> <code>index_url</code>             (<code>str</code>, default:                 <code>DEFAULT_INDEX_URL</code> )         \u2013          <p>The URL of the PyPI index to upload to.</p> </li> <li> <code>sleep</code>             (<code>int</code>, default:                 <code>DEFAULT_WATCHER_SLEEP</code> )         \u2013          <p>The time to sleep in between iterations, in seconds.</p> </li> </ul>"},{"location":"reference/pypi_insiders/watcher/#pypi_insiders.watcher.stop_watcher","title":"stop_watcher","text":"<pre><code>stop_watcher() -&gt; bool\n</code></pre> <p>Stop the watcher.</p> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether a process was killed or not.</p> </li> </ul>"},{"location":"reference/pypi_insiders/watcher/#pypi_insiders.watcher.watcher_logs","title":"watcher_logs","text":"<pre><code>watcher_logs() -&gt; None\n</code></pre> <p>Show the watcher logs.</p>"},{"location":"reference/pypi_insiders/watcher/#pypi_insiders.watcher.watcher_loop","title":"watcher_loop","text":"<pre><code>watcher_loop(\n    *,\n    conf_path: str | Path = DEFAULT_CONF_PATH,\n    repo_dir: str | Path = DEFAULT_REPO_DIR,\n    index_url: str = DEFAULT_INDEX_URL,\n    sleep: int = DEFAULT_WATCHER_SLEEP\n) -&gt; None\n</code></pre> <p>Run the watcher in the foreground.</p> <p>Parameters:</p> <ul> <li> <code>conf_path</code>             (<code>str | Path</code>, default:                 <code>DEFAULT_CONF_PATH</code> )         \u2013          <p>The path to the configuration file.</p> </li> <li> <code>repo_dir</code>             (<code>str | Path</code>, default:                 <code>DEFAULT_REPO_DIR</code> )         \u2013          <p>The directory containing the repository clones.</p> </li> <li> <code>index_url</code>             (<code>str</code>, default:                 <code>DEFAULT_INDEX_URL</code> )         \u2013          <p>The URL of the PyPI index to upload to.</p> </li> <li> <code>sleep</code>             (<code>int</code>, default:                 <code>DEFAULT_WATCHER_SLEEP</code> )         \u2013          <p>The time to sleep in between iterations, in seconds.</p> </li> </ul>"},{"location":"reference/pypi_insiders/watcher/#pypi_insiders.watcher.watcher_status","title":"watcher_status","text":"<pre><code>watcher_status() -&gt; dict | None\n</code></pre> <p>Return the watcher status as a dict of metadata.</p> <p>Returns:</p> <ul> <li> <code>dict | None</code>         \u2013          <p>Some metadata about the watcher process.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/","title":"Index","text":""},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli","title":"cli","text":"<p>Module that contains the command line application.</p> <p>Modules:</p> <ul> <li> <code>repos</code>         \u2013          <p>CLI <code>repos</code> command.</p> </li> <li> <code>server</code>         \u2013          <p>CLI <code>server</code> command.</p> </li> <li> <code>update</code>         \u2013          <p>CLI <code>update</code> command.</p> </li> <li> <code>watcher</code>         \u2013          <p>CLI <code>watcher</code> command.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>add_arg_conf_path</code>           \u2013            <p>Add a conf-path option to the parser.</p> </li> <li> <code>add_arg_dist_dir</code>           \u2013            <p>Add a dist-dir option to the parser.</p> </li> <li> <code>add_arg_index_url</code>           \u2013            <p>Add an index-url option to the parser.</p> </li> <li> <code>add_arg_log_level</code>           \u2013            <p>Add a log-level option to the parser.</p> </li> <li> <code>add_arg_log_path</code>           \u2013            <p>Add a log-path option to the parser.</p> </li> <li> <code>add_arg_port</code>           \u2013            <p>Add a port option to the parser.</p> </li> <li> <code>add_arg_repo_dir</code>           \u2013            <p>Add a repo-dir option to the parser.</p> </li> <li> <code>add_arg_repositories</code>           \u2013            <p>Add a repository argument to the parser.</p> </li> <li> <code>add_arg_repositories_packages</code>           \u2013            <p>Add a repository:package argument to the parser.</p> </li> <li> <code>add_arg_sleep</code>           \u2013            <p>Add a sleep option to the parser.</p> </li> <li> <code>configure_logging</code>           \u2013            <p>Configure logging.</p> </li> <li> <code>get_parser</code>           \u2013            <p>Return the CLI argument parser.</p> </li> <li> <code>main</code>           \u2013            <p>Run the main program.</p> </li> <li> <code>subparser</code>           \u2013            <p>Add a subparser to a parser.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.add_arg_conf_path","title":"add_arg_conf_path","text":"<pre><code>add_arg_conf_path(parser: ArgumentParser) -&gt; None\n</code></pre> <p>Add a conf-path option to the parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the option to.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.add_arg_dist_dir","title":"add_arg_dist_dir","text":"<pre><code>add_arg_dist_dir(parser: ArgumentParser) -&gt; None\n</code></pre> <p>Add a dist-dir option to the parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the option to.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.add_arg_index_url","title":"add_arg_index_url","text":"<pre><code>add_arg_index_url(parser: ArgumentParser) -&gt; None\n</code></pre> <p>Add an index-url option to the parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the option to.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.add_arg_log_level","title":"add_arg_log_level","text":"<pre><code>add_arg_log_level(parser: ArgumentParser) -&gt; None\n</code></pre> <p>Add a log-level option to the parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the option to.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.add_arg_log_path","title":"add_arg_log_path","text":"<pre><code>add_arg_log_path(parser: ArgumentParser) -&gt; None\n</code></pre> <p>Add a log-path option to the parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the option to.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.add_arg_port","title":"add_arg_port","text":"<pre><code>add_arg_port(parser: ArgumentParser) -&gt; None\n</code></pre> <p>Add a port option to the parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the option to.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.add_arg_repo_dir","title":"add_arg_repo_dir","text":"<pre><code>add_arg_repo_dir(parser: ArgumentParser) -&gt; None\n</code></pre> <p>Add a repo-dir option to the parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the option to.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.add_arg_repositories","title":"add_arg_repositories","text":"<pre><code>add_arg_repositories(\n    parser: ArgumentParser, nargs: str = \"+\"\n) -&gt; None\n</code></pre> <p>Add a repository argument to the parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the option to.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.add_arg_repositories_packages","title":"add_arg_repositories_packages","text":"<pre><code>add_arg_repositories_packages(\n    parser: ArgumentParser,\n) -&gt; None\n</code></pre> <p>Add a repository:package argument to the parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the option to.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.add_arg_sleep","title":"add_arg_sleep","text":"<pre><code>add_arg_sleep(parser: ArgumentParser) -&gt; None\n</code></pre> <p>Add a sleep option to the parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the option to.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.configure_logging","title":"configure_logging","text":"<pre><code>configure_logging(\n    level: str,\n    path: str | Path | None = None,\n    allow: str | tuple[str] | None = None,\n) -&gt; None\n</code></pre> <p>Configure logging.</p> <p>Parameters:</p> <ul> <li> <code>level</code>             (<code>str</code>)         \u2013          <p>Log level (name).</p> </li> <li> <code>path</code>             (<code>str | Path | None</code>, default:                 <code>None</code> )         \u2013          <p>Log file path.</p> </li> <li> <code>allow</code>             (<code>str | tuple[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>List of package names for which to allow log levels greater or equal to INFO level. Packages that are not allowed will see all their logs demoted to DEBUG level. If unspecified, allow everything.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgumentParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>         \u2013          <p>An argparse parser.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>pypi-insiders</code> or <code>python -m pypi_insiders</code>.</p> <p>Parameters:</p> <ul> <li> <code>args</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>An exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/#pypi_insiders.cli.subparser","title":"subparser","text":"<pre><code>subparser(\n    parser: ArgumentParser,\n    command: str,\n    command_help: str,\n    help_option_text: str,\n    **kwargs: Any\n) -&gt; ArgumentParser\n</code></pre> <p>Add a subparser to a parser.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgumentParser</code>)         \u2013          <p>The parser to add the subparser to.</p> </li> <li> <code>command</code>             (<code>str</code>)         \u2013          <p>The subcommand invoking this subparser.</p> </li> <li> <code>command_help</code>             (<code>str</code>)         \u2013          <p>The subcommand description.</p> </li> <li> <code>help_option_text</code>             (<code>str</code>)         \u2013          <p>The message of the subcommand's <code>-h</code> option.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional parameters passed to <code>add_parser</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>         \u2013          <p>The subparser.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/repos/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> repos","text":""},{"location":"reference/pypi_insiders/cli/repos/#pypi_insiders.cli.repos","title":"repos","text":"<p>CLI <code>repos</code> command.</p> <p>Functions:</p> <ul> <li> <code>run_repos</code>           \u2013            <p>Command to manage repositories.</p> </li> <li> <code>run_repos_add</code>           \u2013            <p>Command to add repositories.</p> </li> <li> <code>run_repos_list</code>           \u2013            <p>Command to list repositories.</p> </li> <li> <code>run_repos_remove</code>           \u2013            <p>Command to remove repositories.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/repos/#pypi_insiders.cli.repos.run_repos","title":"run_repos","text":"<pre><code>run_repos(opts: Namespace) -&gt; int\n</code></pre> <p>Command to manage repositories.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/repos/#pypi_insiders.cli.repos.run_repos_add","title":"run_repos_add","text":"<pre><code>run_repos_add(opts: Namespace) -&gt; int\n</code></pre> <p>Command to add repositories.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/repos/#pypi_insiders.cli.repos.run_repos_list","title":"run_repos_list","text":"<pre><code>run_repos_list(opts: Namespace) -&gt; int\n</code></pre> <p>Command to list repositories.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/repos/#pypi_insiders.cli.repos.run_repos_remove","title":"run_repos_remove","text":"<pre><code>run_repos_remove(opts: Namespace) -&gt; int\n</code></pre> <p>Command to remove repositories.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/server/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> server","text":""},{"location":"reference/pypi_insiders/cli/server/#pypi_insiders.cli.server","title":"server","text":"<p>CLI <code>server</code> command.</p> <p>Functions:</p> <ul> <li> <code>run_server</code>           \u2013            <p>Command to manage the server.</p> </li> <li> <code>run_server_logs</code>           \u2013            <p>Command to run the server in foreground.</p> </li> <li> <code>run_server_run</code>           \u2013            <p>Command to run the server in foreground.</p> </li> <li> <code>run_server_start</code>           \u2013            <p>Command to start the server in background.</p> </li> <li> <code>run_server_status</code>           \u2013            <p>Command to show the server status.</p> </li> <li> <code>run_server_stop</code>           \u2013            <p>Command to stop the server.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/server/#pypi_insiders.cli.server.run_server","title":"run_server","text":"<pre><code>run_server(opts: Namespace) -&gt; int\n</code></pre> <p>Command to manage the server.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/server/#pypi_insiders.cli.server.run_server_logs","title":"run_server_logs","text":"<pre><code>run_server_logs(opts: Namespace) -&gt; int\n</code></pre> <p>Command to run the server in foreground.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/server/#pypi_insiders.cli.server.run_server_run","title":"run_server_run","text":"<pre><code>run_server_run(opts: Namespace) -&gt; int\n</code></pre> <p>Command to run the server in foreground.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/server/#pypi_insiders.cli.server.run_server_start","title":"run_server_start","text":"<pre><code>run_server_start(opts: Namespace) -&gt; int\n</code></pre> <p>Command to start the server in background.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/server/#pypi_insiders.cli.server.run_server_status","title":"run_server_status","text":"<pre><code>run_server_status(opts: Namespace) -&gt; int\n</code></pre> <p>Command to show the server status.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/server/#pypi_insiders.cli.server.run_server_stop","title":"run_server_stop","text":"<pre><code>run_server_stop(opts: Namespace) -&gt; int\n</code></pre> <p>Command to stop the server.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/update/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> update","text":""},{"location":"reference/pypi_insiders/cli/update/#pypi_insiders.cli.update","title":"update","text":"<p>CLI <code>update</code> command.</p> <p>Functions:</p> <ul> <li> <code>run_update</code>           \u2013            <p>Command to update packages.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/update/#pypi_insiders.cli.update.run_update","title":"run_update","text":"<pre><code>run_update(opts: Namespace) -&gt; int\n</code></pre> <p>Command to update packages.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/watcher/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> watcher","text":""},{"location":"reference/pypi_insiders/cli/watcher/#pypi_insiders.cli.watcher","title":"watcher","text":"<p>CLI <code>watcher</code> command.</p> <p>Functions:</p> <ul> <li> <code>run_watcher</code>           \u2013            <p>Command to manage the watcher.</p> </li> <li> <code>run_watcher_logs</code>           \u2013            <p>Command to show the watcher logs.</p> </li> <li> <code>run_watcher_run</code>           \u2013            <p>Command to run the watcher.</p> </li> <li> <code>run_watcher_start</code>           \u2013            <p>Command to start the watcher.</p> </li> <li> <code>run_watcher_status</code>           \u2013            <p>Command to show the watcher status.</p> </li> <li> <code>run_watcher_stop</code>           \u2013            <p>Command to stop the watcher.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/watcher/#pypi_insiders.cli.watcher.run_watcher","title":"run_watcher","text":"<pre><code>run_watcher(opts: Namespace) -&gt; int\n</code></pre> <p>Command to manage the watcher.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/watcher/#pypi_insiders.cli.watcher.run_watcher_logs","title":"run_watcher_logs","text":"<pre><code>run_watcher_logs(opts: Namespace) -&gt; int\n</code></pre> <p>Command to show the watcher logs.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/watcher/#pypi_insiders.cli.watcher.run_watcher_run","title":"run_watcher_run","text":"<pre><code>run_watcher_run(opts: Namespace) -&gt; int\n</code></pre> <p>Command to run the watcher.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/watcher/#pypi_insiders.cli.watcher.run_watcher_start","title":"run_watcher_start","text":"<pre><code>run_watcher_start(opts: Namespace) -&gt; int\n</code></pre> <p>Command to start the watcher.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/watcher/#pypi_insiders.cli.watcher.run_watcher_status","title":"run_watcher_status","text":"<pre><code>run_watcher_status(opts: Namespace) -&gt; int\n</code></pre> <p>Command to show the watcher status.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"},{"location":"reference/pypi_insiders/cli/watcher/#pypi_insiders.cli.watcher.run_watcher_stop","title":"run_watcher_stop","text":"<pre><code>run_watcher_stop(opts: Namespace) -&gt; int\n</code></pre> <p>Command to stop the watcher.</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The parsed CLI arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A CLI exit code.</p> </li> </ul>"}]}